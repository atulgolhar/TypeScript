
Type Assertion or Type Casting or TypeScript Casting = sometimes you will have information
about the type of a value that TypeScript can't know about.

=======official docs
example, if your using document.getElementById then TypeScript only knows that this will 
return SOME kind of HTMLElement, but you might know that your page will always have an HTMLCanvasElement
with a given ID. In this situation, you can use a Type Assertion to specify a more specific type 

https://typescriptinglng.org/docs/handbook/2/everyday-types.html#type-assertions

const myCanvas = document.getElementById("main_canvas") as HTMLCanvasE
====================

eliminate all starter code

CONTL ` to open termainl
$ tsc -w

create main.ts file
type One = string
type Two = string | number
type Three = 'hello'

// convert to more or less specific
let a: One = 'hello'
let b = a as Two	// less specific. ie assigned a type that was less specific (ATUL b equals a but b as type Two ie string|number)
let c = a as Three 	// more specific

let d = <One>'world'			// angle brackets can not be used in tsx in React
let e = <string | number>'world'

// use Assertions for Narrowing

const addOrConcat = (a: number, b: number, c: 'add' | 'concat'): number | string => {
	if (c === 'add') return a + b
	return '' + a + b 			// this '' empty string will coerse the numbers and make all of this a string instead
}

let myVal: string = addOrConcat(2,2,'concat')	// TypeScript does NOT like this b/c addOrConcat is a union type but myVal is just string

FIX WITH AN ASSERTION like this (ie hey! ignore the warning as we know we are returning a string)

let myVal: string = addOrConcat(2,2,'concat') as string		// here we say that addOrConcat will return a string in this instance so TypeScript is OK with this

// be careful! b/c TS sees no problem here but a string is returned
let nextVal: number = addOrConcat(2,2,'concat') as number 	// ATUL NOTES require an explanation

// initially we tell TS hey! we know we are returning a string
// why? myVal is type string and we return a string
// and in nextVal we tell TS hey! we know we are returning a number
// BUT mistake is possible b/c addOrConcat could return a string such as 'concat' then it produces a mistake

// TS will check for errors but it will NOT always be able to check such as in the example above v01.51.49
/* Conversion of type 'number' to type 'string' may be a mistake because neither type sufficiently overlaps with 
   the other. If this was intentional, convert the expression to 'unknown' first.  ts(2352)	*/

10 as string			// error

// Forced Casting or Double Casting = so when you know you want to cast something specially then you
// can overrule TS. How?

(10 as unknown) as string 	// ok b/c VSCode will not complain about this

// Assertions can be very useful when working with DOM

// The DOM
const img = document.querySelector('img')


////////////////

// Another way to get rid of the error by eliminating the vagueness

const img = document.querySelector('img')!
const myImg = document.getElementById('#img') as HTMLImageElement		// copy HTMLImageElement
const nextImg = <HTMLImageElement>document.getElementById('#img')		// paste inside <>
										// will eliminate the error



///////////////

// 1st Variation
let year: HTMLElement | null			// new line explicit definition here
year = document.getElementById("year")		// 
let thisYear: string				// new line explicit definition here
thisYear = new Date().getFullYear().toString()	// remove const, add .toString method and this make TS happy b/c thisYear is truely a string
if (year) {
	year.setAttribute("datetime", thisYear)	// still error here as mousing over shows object is possibly null which we have no way of knowing this so need a TYPE GUARD
	year.textContent = thisYear		// still error here
}

// now this works and TS is happy but there are still some bad habits here
// so we apply just a little more of what we learned in Assertions from above


// 2nd Variation
const year = document.getElementById("year") as HTMLSpanElement
const thisYear: string = new Date().getFullYear().toString()
year.setAttribute("datetime", thisYear)
year.textContent = thisYear


// switch 		let back to const
// line 2 delete 	year =
// move line 2 to 1
// delete line 1	HTMLElement | null
// line 1 delete : and replace with equal = sign
// now include Assertion in line 1	as HTMLSpanElement
// why Assertion? b/c we explicitly told TS that hey we know that the SpanElement is inside our document
// 		  we know it has the Id year and that is exactly what we are selecting so now when I mouse
// 		  over it, then it shows me that year is an HTMLSpanElement
// 		  so we explicit said this using a Type Assertion
// now lets switch keyword let back to const

// combine lines 2 and 3
let thisYear: string				//
thisYear = new Date().getFullYear().toString()	//

// to now become this
const thisYear: string = new Date().getFullYear().toString()	//

// now after these changes, we dont need the if statement at all b/c 
// we have told TS in line 1 with our Type Assertion of as HTMLSpanElement that 
// we are definitely going to have a year
// also notice for this same issue that when we mouse over, it does not offer the null option
// and it is defined as 	const year: HTMLSpanElement and it does NOT have the union type with
// the possible null value
// so we can just delete the if statement
// and then TS is ok with what we have left

// 2nd Variation
const year = document.getElementById("year") as HTMLSpanElement
const thisYear: string = new Date().getFullYear().toString()
year.setAttribute("datetime", thisYear)
year.textContent = thisYear
